package graphs;

import java.util.ArrayDeque;
import java.util.List;
import java.util.Queue;

public class TraversalBfsDfs {

	public static void main(String[] args) {
		// List of graph edges as per above diagram
		Graph graph = new Graph();
		graph.addEdge(1, 2);
		graph.addEdge(1, 3);
		graph.addEdge(1, 3);
		graph.addEdge(2, 5);
		graph.addEdge(2, 6);
		graph.addEdge(5, 9);
		graph.addEdge(5, 10);
		graph.addEdge(4, 7);
		graph.addEdge(4, 8);
		graph.addEdge(7, 11);
		graph.addEdge(7, 12);
		graph.addVertex(0);
		graph.addVertex(13);
		graph.addVertex(14);
		
		// vertex 0, 13 and 14 are single nodes
		
		TraversalBfsDfs bfs = new TraversalBfsDfs();
		
		int n = graph.adjacencyList.size();
		
		System.out.println("Number of nodes in graph is : "+n);
		
		boolean[] visited = new boolean[n];
		
		// Do BFS traversal from all nodes to
				// cover all unconnected components of graph
				for (int i = 0; i < 15; i++) {
					if (visited[i] == false) {
						// start BFS traversal from vertex i
					System.out.println("\nStarting BFS from "+i+" : ");
						bfs.BFS(graph, i, visited);
					}
				}
		
		
	}
	
	// adjacency list here is holding an edge since provision has been kept for the weight of the edge else it may just hold a list of vertices
	public void BFS(Graph graph, Integer source, boolean [] visited) {
		int n = graph.adjacencyList.size();
		
		Queue<Integer> q = new ArrayDeque<>();
		
		q.add(source);
		visited[source]= true;
		
		while(!q.isEmpty()) {
			Integer u = q.poll();
			System.out.print(" "+u);
			List<Edge> edgeList = graph.adjacencyList.get(u);
			for(Edge e : edgeList) {
				Integer v = e.getDestination();
				if(visited[v]== false) {
					visited[v] = true;
					q.add(v);
				}
			}
		}
		
	}

}
