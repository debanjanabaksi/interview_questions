package hard;

public class ShortestPalindrome {

	public static void main(String[] args) {
		String s1 = "aacecaaa";
		String s2 = "abcd";
		String s3 = "banana";
		System.out.println("Shortest palindrome created is : "+shortestPalindrome(s1));
		System.out.println("Shortest palindrome created is : "+shortestPalindrome(s2));
		System.out.println("Shortest palindrome created is : "+shortestPalindromeKMP(s1));
		System.out.println("Shortest palindrome created is : "+shortestPalindromeKMP(s2));
		System.out.println("Shortest palindrome created is : "+shortestPalindromeKMP(s3));
		
		
		
	}
	
	// recursion based. O(n2) time O(n) space for extra string
	public static String shortestPalindrome(String str) {
		int n = str.length();
		int i=0;
		int j= n-1;
		while(j>=0) {
			if(str.charAt(i)==str.charAt(j)) {
				//System.out.println("matching is : "+str.charAt(i)+" "+str.charAt(j));
				i++;
			}
			j--;
		}
		//System.out.println("i is : "+i);
		if(i==n) {
			return str;
		}
		String suffix = str.substring(i);
		//System.out.println("Suffix is : "+suffix);
		String prefix = new StringBuilder(suffix).reverse().toString();
		//System.out.println("Prefix is : "+prefix);
		String mid = shortestPalindrome(str.substring(0,i));
		//System.out.println("mid is : "+mid);
		return prefix+mid+suffix;
		
	}
	
	//KMP based O(n) time and O(n) space
	
	public static String shortestPalindromeKMP(String str) {
		int n = str.length();
		String rev_str = new StringBuilder(str).reverse().toString();
		String l = rev_str+"#"+str;
		int[] lps = computePrefixArray(l);
		
		return rev_str.substring(0, str.length()-lps[n-1])+str;
	}
	
	private static int[] computePrefixArray(String str) {
		int n = str.length();
		int index = 0;
		int[]lps = new int[n];
		int i = 1;
		lps[0]= 0;
		while(i<n) {
			if(str.charAt(i)== str.charAt(index)) {
				lps[index]= index+1;
				index++;
				i++;
			} else if(index!=0) {
				index = lps[index-1];
			} else {
				lps[i]=0;
				i++;
			}
		}
		return lps;
	}

}
