package graphs;

import java.util.List;
import java.util.Stack;

public class TopologicalSort {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	
	public void runTopologicalSort(Graph graph) {
		Stack<Integer> st = new Stack<>();
		int n = graph.adjacencyList.size();
		boolean visited[] = new boolean[n];
		for (int i= 0; i<n; i++) {
			if(!visited[i]) {
				topologicalSort(graph, visited, st, i);
			}
		}
		
		while(!st.isEmpty()) {
			System.out.print(" "+st.pop());
		}
	}
	
	private void topologicalSort(Graph graph, boolean[] visited, Stack<Integer> st, Integer source) {
		visited[source] = true;
		List<Edge> edgeList = graph.adjacencyList.get(source);
		for(Edge e : edgeList) {
			Integer v = e.getSource();
			if(!visited[v]) {
				topologicalSort(graph, visited, st, v);
			}
		}
		st.add(source);
	}

}
